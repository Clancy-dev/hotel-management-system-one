// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Room {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  roomNumber  String   @unique
  categoryId  String   @db.ObjectId
  price       Float
  description String
  images      String[]
  
  // Policy-specific pricing
  standardPolicy StandardPolicyData?
  customPolicy   CustomPolicyData?
  mixedPolicy    MixedPolicyData?
  
  // Room Status
  currentStatusId String? @db.ObjectId
  currentStatus   RoomStatus? @relation(fields: [currentStatusId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category RoomCategory? @relation(fields: [categoryId], references: [id])
  
  // Relations
  statusHistory RoomStatusHistory[]
  bookings      Booking[]
}

model RoomCategory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rooms Room[]
}

model RoomStatus {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  color       String   // Hex color code
  description String?
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rooms         Room[]
  statusHistory RoomStatusHistory[]
}

model RoomStatusHistory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  roomId      String   @db.ObjectId
  statusId    String   @db.ObjectId
  previousStatusId String? @db.ObjectId
  notes       String?
  changedBy   String?  // User who made the change
  changedAt   DateTime @default(now())
  
  // Relations
  room          Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  status        RoomStatus @relation(fields: [statusId], references: [id])
  
  // Booking relation if status change was due to booking
  bookingId     String?    @db.ObjectId
  booking       Booking?   @relation(fields: [bookingId], references: [id])
}

model Guest {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Personal Information
  firstName       String
  lastName        String
  nationality     String
  gender          String   // "male", "female", "other"
  dateOfBirth     DateTime?
  phoneNumber     String
  email           String?
  address         String?
  nextOfKin       String?
  
  // Identification
  ninNumber       String?  // National ID for Ugandans
  passportNumber  String?
  visaType        String?
  visaNumber      String?
  drivingPermit   String?
  
  // Emergency Contact
  emergencyContact String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  bookings        Booking[]
  additionalGuests AdditionalGuest[]
}

model Booking {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Room and Guest
  roomId          String   @db.ObjectId
  guestId         String   @db.ObjectId
  
  // Booking Information
  checkInDate     DateTime
  checkOutDate    DateTime
  actualCheckIn   DateTime?
  actualCheckOut  DateTime?
  duration        Int      // in nights or hours
  numberOfGuests  Int
  
  // Purpose of Stay
  purposeOfStay   String   // "business", "leisure", "transit", "event", "other"
  purposeDetails  String?  // For "other" purpose
  
  // Vehicle Details
  vehicleRegistration String?
  vehicleType     String?
  parkingRequired Boolean  @default(false)
  
  // Company/Sponsor
  company         String?
  
  // Status
  status          String   @default("active") // "active", "checked_out", "cancelled"
  isActive        Boolean  @default(true)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  room            Room     @relation(fields: [roomId], references: [id])
  guest           Guest    @relation(fields: [guestId], references: [id])
  payments        Payment[]
  additionalGuests AdditionalGuest[]
  statusHistory   RoomStatusHistory[]
}

model AdditionalGuest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  bookingId   String   @db.ObjectId
  guestId     String   @db.ObjectId
  
  createdAt   DateTime @default(now())
  
  // Relations
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  guest       Guest    @relation(fields: [guestId], references: [id])
}

model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  bookingId       String   @db.ObjectId
  
  // Payment Details
  amount          Float
  paymentMode     String   // "cash", "card", "mobile_money", "bank_transfer"
  receiptNumber   String?
  depositPaid     Float?
  roomRate        Float
  discountType    String?  // "corporate", "promo", "none"
  discountAmount  Float?
  totalBill       Float
  balanceRemaining Float   @default(0)
  
  // Payment Status
  status          String   @default("pending") // "pending", "partial", "completed"
  
  // Mobile Money Details (for Uganda)
  mobileMoneyProvider String? // "MTN_MoMo", "Airtel_Money"
  mobileMoneyNumber   String?
  
  paymentDate     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  booking         Booking  @relation(fields: [bookingId], references: [id])
}

// Standard Policy Data Structure
type StandardPolicyData {
  basePrice         Float
  checkInStart      String  // "12:00"
  checkInEnd        String  // "14:00"
  checkOutStart     String  // "10:00"
  checkOutEnd       String  // "11:00"
  nightStart        String  // "12:00"
  nightEnd          String  // "10:00"
  lateCheckOutRates LateCheckOutRate[]
  earlyCheckInRates EarlyCheckInRate[]
}

type LateCheckOutRate {
  id          String
  startTime   String  // "11:00"
  endTime     String  // "16:00"
  charge      Float
  description String?
}

type EarlyCheckInRate {
  id          String
  startTime   String  // "08:00"
  endTime     String  // "12:00"
  charge      Float
  description String?
}

// Custom Policy Data Structure
type CustomPolicyData {
  baseHours         Int
  pricePerHour      Float
  overtimeRates     OvertimeRate[]
  earlyCheckOutRate Float?
}

type OvertimeRate {
  id          String
  afterHours  Int     // After how many hours
  upToHours   Int?    // Up to how many hours (optional)
  charge      Float
  description String?
}

// Mixed Policy Data Structure
type MixedPolicyData {
  standardPolicy StandardPolicyData
  customPolicy   CustomPolicyData
  defaultMode    String // "standard" | "custom"
}
